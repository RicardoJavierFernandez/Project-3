{"ast":null,"code":"// Write the code for the model and write the data\n// to the ForecastOutput table in the database\nfunction forecastOutput(unitsOrder, totalOrder, masterCarton) {\n  let orderAmount = 0;\n  let leadTime = 0; // represented in days\n\n  let growthPercentage = 0; // input1 = 0.8\n\n  if (totalOrder / unitsOrder >= 0.8) {\n    orderAmount = unitsOrder;\n  } // input2 = 0.25\n  else if (totalOrder / unitsOrder < 0.25) {\n      orderAmount = unitsOrder * 0.5;\n    } // input3 = 0.49\n    else if (totalOrder / unitsOrder <= 0.49) {\n        orderAmount = unitsOrder * 0.7;\n      } // input4 = 0.79\n      else if (totalOrder / unitsOrder <= 0.79) {\n          orderAmount = unitsOrder * 0.88;\n        } // Adjustment for master carton. Should return number of master cartons to order\n\n\n  if (orderAmount % masterCarton / masterCarton >= 0.5) {\n    return Math.round(orderAmount / masterCarton, 0);\n  } else {\n    return Math.floor(orderAmount / masterCarton);\n  } // Whatever product is selected for the forecast, query the database for the quantity of that product\n  // and if the quantity from the forecast is greater than the quantity in the database\n  // then subtract the forecast output by the quantity in the database.\n\n}\n\nmodule.exports = {\n  forecastOutput\n};","map":{"version":3,"sources":["/Users/alantsoi/ift_project/Project-3/client/src/utils/forecastingModel.js"],"names":["forecastOutput","unitsOrder","totalOrder","masterCarton","orderAmount","leadTime","growthPercentage","Math","round","floor","module","exports"],"mappings":"AAAA;AACA;AAEA,SAASA,cAAT,CAAwBC,UAAxB,EAAoCC,UAApC,EAAgDC,YAAhD,EAA8D;AAE1D,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,QAAQ,GAAG,CAAf,CAH0D,CAGxC;;AAClB,MAAIC,gBAAgB,GAAG,CAAvB,CAJ0D,CAM1D;;AACA,MAAIJ,UAAU,GAAGD,UAAb,IAA2B,GAA/B,EAAoC;AAChCG,IAAAA,WAAW,GAAGH,UAAd;AACH,GAFD,CAGA;AAHA,OAIK,IAAIC,UAAU,GAAGD,UAAb,GAA0B,IAA9B,EAAoC;AACrCG,MAAAA,WAAW,GAAGH,UAAU,GAAG,GAA3B;AACH,KAFI,CAGL;AAHK,SAIA,IAAIC,UAAU,GAAGD,UAAb,IAA2B,IAA/B,EAAqC;AACtCG,QAAAA,WAAW,GAAGH,UAAU,GAAG,GAA3B;AACH,OAFI,CAGL;AAHK,WAIA,IAAGC,UAAU,GAAGD,UAAb,IAA2B,IAA9B,EAAoC;AACrCG,UAAAA,WAAW,GAAGH,UAAU,GAAG,IAA3B;AACH,SArByD,CAuB1D;;;AACA,MAAMG,WAAW,GAAGD,YAAf,GAA+BA,YAAhC,IAAiD,GAArD,EAA0D;AACtD,WAAOI,IAAI,CAACC,KAAL,CAAWJ,WAAW,GAAGD,YAAzB,EAAuC,CAAvC,CAAP;AACH,GAFD,MAGK;AACD,WAAOI,IAAI,CAACE,KAAL,CAAWL,WAAW,GAAGD,YAAzB,CAAP;AACH,GA7ByD,CA+B1D;AACA;AACA;;AAEH;;AAEDO,MAAM,CAACC,OAAP,GAAiB;AAAEX,EAAAA;AAAF,CAAjB","sourcesContent":["// Write the code for the model and write the data\n// to the ForecastOutput table in the database\n\nfunction forecastOutput(unitsOrder, totalOrder, masterCarton) {\n        \n    let orderAmount = 0;\n    let leadTime = 0; // represented in days\n    let growthPercentage = 0;\n\n    // input1 = 0.8\n    if (totalOrder / unitsOrder >= 0.8) {\n        orderAmount = unitsOrder;\n    }\n    // input2 = 0.25\n    else if (totalOrder / unitsOrder < 0.25) {\n        orderAmount = unitsOrder * 0.5;\n    }\n    // input3 = 0.49\n    else if (totalOrder / unitsOrder <= 0.49) {\n        orderAmount = unitsOrder * 0.7;\n    }\n    // input4 = 0.79\n    else if(totalOrder / unitsOrder <= 0.79) {\n        orderAmount = unitsOrder * 0.88;\n    }\n\n    // Adjustment for master carton. Should return number of master cartons to order\n    if (((orderAmount % masterCarton) / masterCarton) >= 0.5) {\n        return Math.round(orderAmount / masterCarton, 0);\n    }\n    else {\n        return Math.floor(orderAmount / masterCarton)\n    }\n    \n    // Whatever product is selected for the forecast, query the database for the quantity of that product\n    // and if the quantity from the forecast is greater than the quantity in the database\n    // then subtract the forecast output by the quantity in the database.\n\n}\n\nmodule.exports = { forecastOutput };\n"]},"metadata":{},"sourceType":"module"}