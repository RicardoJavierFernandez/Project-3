{"ast":null,"code":"var _jsxFileName = \"/Users/ricky/Documents/CodingBootcamp/Projects/Project-3/client/src/views/ForecastDetail.js\";\nimport React, { Component } from 'react';\nimport API from '../utils/API';\nimport forecastModel from '../utils/forecastingModel';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\n\nclass ForecastDetail extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.submitAssumptions = e => {\n      e.preventDefault();\n\n      if (parseFloat(this.state.unitsOrder) >= 0 && parseFloat(this.state.totalOrder) >= 0 && parseFloat(this.state.masterCarton) >= 0) {\n        let output = forecastModel.forecastOutput(parseFloat(this.state.unitsOrder), parseFloat(this.state.totalOrder), parseFloat(this.state.masterCarton));\n        let product = document.getElementById('products');\n        this.setState({\n          orderAmount: output,\n          selectedProduct: product.options[product.selectedIndex].id\n        }, () => {\n          API.getProduct(this.state.selectedProduct).then(apiResponse => {\n            if (apiResponse.data) {\n              if (apiResponse.data.quantity > this.state.orderAmount) {\n                this.setState({\n                  orderAmount: 0\n                });\n              } else {\n                this.setState({\n                  orderAmount: this.state.orderAmount - apiResponse.data.quantity\n                });\n              }\n            }\n          });\n        });\n      } else {\n        this.setState({\n          orderAmount: \"Error please input valid numbers greater than zero in the input boxes!\"\n        });\n      }\n    };\n\n    this.state = {\n      unitsOrder: '',\n      totalOrder: '',\n      masterCarton: '',\n      salesGrowth: '',\n      leadTime: '',\n      orderAmount: '',\n      selectedProduct: '',\n      products: []\n    };\n  } // retrieve the products in the database\n\n\n  componentDidMount() {\n    API.getAllProducts().then(dbResponse => {\n      let dbData = [];\n      dbResponse.data.map(row => {\n        dbData.push(row.product_id);\n      });\n      this.setState({\n        products: dbData\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      size: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Product\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Units Order\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Total Order\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Master Carton\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Sales Growth\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Lead Time\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Order Amount\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.state.products.length ? React.createElement(\"select\", {\n      id: \"products\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, this.state.products.map((product, index) => React.createElement(\"option\", {\n      key: index,\n      value: product,\n      id: product,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Product \", product))) : React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"No options\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"unitsOrder\",\n      placeholder: \"Units Ordered\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"totalOrder\",\n      placeholder: \"Total Orders\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"masterCarton\",\n      placeholder: \"Master Carton\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"salesGrowth\",\n      placeholder: \"Sales Growth\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"leadTime\",\n      placeholder: \"Lead Time\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })), this.state.orderAmount > 0 ? React.createElement(\"td\", {\n      className: \"alert-success\",\n      onClick: () => alert('Order now!'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.state.orderAmount, \" master cartons\")) : React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"--\"))))), React.createElement(Button, {\n      variant: \"success\",\n      onClick: this.submitAssumptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Calculate\"));\n  }\n\n}\n\nexport default ForecastDetail;","map":{"version":3,"sources":["/Users/ricky/Documents/CodingBootcamp/Projects/Project-3/client/src/views/ForecastDetail.js"],"names":["React","Component","API","forecastModel","Table","Button","Container","ForecastDetail","constructor","props","handleChange","event","setState","target","name","value","submitAssumptions","e","preventDefault","parseFloat","state","unitsOrder","totalOrder","masterCarton","output","forecastOutput","product","document","getElementById","orderAmount","selectedProduct","options","selectedIndex","id","getProduct","then","apiResponse","data","quantity","salesGrowth","leadTime","products","componentDidMount","getAllProducts","dbResponse","dbData","map","row","push","product_id","render","length","index","alert"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport API from '../utils/API';\nimport forecastModel from '../utils/forecastingModel';\n\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\n\nclass ForecastDetail extends Component {\n    constructor(props) {\n        super(props);\n\n    this.state = {\n        unitsOrder: '',\n        totalOrder: '',\n        masterCarton: '',\n        salesGrowth: '',\n        leadTime: '',\n        orderAmount: '',\n        selectedProduct: '',\n        products: []\n    }\n}\n\n// retrieve the products in the database\ncomponentDidMount() {\n    API.getAllProducts()\n        .then((dbResponse) => {\n            let dbData = []\n            dbResponse.data.map((row) => {\n                dbData.push(row.product_id);\n        });\n        this.setState({products: dbData})\n    });\n}\n\nhandleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value});\n}\n\n// run forecast model and use output to determine the order quantity\nsubmitAssumptions = (e) => {\n    e.preventDefault();\n\n    if(parseFloat(this.state.unitsOrder) >= 0 && parseFloat(this.state.totalOrder) >= 0 && parseFloat(this.state.masterCarton) >= 0) {\n        let output = forecastModel.forecastOutput(\n            parseFloat(this.state.unitsOrder), \n            parseFloat(this.state.totalOrder), \n            parseFloat(this.state.masterCarton)\n        );\n\n        let product = document.getElementById('products');\n    \n        this.setState(\n            {\n                orderAmount: output, \n                selectedProduct: product.options[product.selectedIndex].id\n            }, \n            () => {\n                API.getProduct(this.state.selectedProduct).then((apiResponse)=> {\n                    if(apiResponse.data) {\n                        if(apiResponse.data.quantity > this.state.orderAmount) {\n                            this.setState({orderAmount: 0})\n                        }\n                        else {\n                            this.setState({orderAmount: (this.state.orderAmount - apiResponse.data.quantity)});\n                        }\n                    }\n                });\n            });\n    }\n    else {\n        this.setState({orderAmount: \"Error please input valid numbers greater than zero in the input boxes!\"});\n    }\n}\n\n    render() {\n\n        return(\n            <Container >\n                <Table striped bordered hover size=\"sm\">\n                    <thead>\n                        <tr>\n                        <th>Product</th>\n                        <th>Units Order</th>\n                        <th>Total Order</th>\n                        <th>Master Carton</th>\n                        <th>Sales Growth</th>\n                        <th>Lead Time</th>\n                        <th>Order Amount</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                        <td>\n                            {this.state.products.length ? (\n                                <select id=\"products\">\n                                {this.state.products.map((product, index) => \n                                    <option key={index} value={product} id={product}>Product {product}</option>\n                                )}\n                                </select>\n                            ) : (<strong>No options</strong>)}\n                        </td>\n                        <td>\n                            <input type=\"text\" name=\"unitsOrder\"placeholder=\"Units Ordered\" onChange={this.handleChange}></input>\n                        </td>\n                        <td>\n                            <input type=\"text\" name=\"totalOrder\"placeholder=\"Total Orders\" onChange={this.handleChange}></input>\n                        </td>\n                        <td>\n                            <input type=\"text\" name=\"masterCarton\" placeholder=\"Master Carton\" onChange={this.handleChange}></input>\n                        </td>\n                        <td>\n                            <input type=\"text\" name=\"salesGrowth\" placeholder=\"Sales Growth\" onChange={this.handleChange}></input>\n                        </td>\n                        <td>\n                            <input type=\"text\" name=\"leadTime\" placeholder=\"Lead Time\" onChange={this.handleChange}></input>\n                        </td>\n                        {this.state.orderAmount > 0 ?\n                        <td  className=\"alert-success\" onClick={() => alert('Order now!')}>    \n                            <strong >{this.state.orderAmount} master cartons</strong> \n                        </td>\n                        : <td><strong>--</strong></td>}\n                        </tr>\n                    </tbody>\n                </Table>\n                <Button variant=\"success\" onClick={this.submitAssumptions}>Calculate</Button>\n            </Container>\n\n        )\n    }\n}\n\nexport default ForecastDetail;"]},"metadata":{},"sourceType":"module"}